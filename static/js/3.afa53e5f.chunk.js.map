{"version":3,"sources":["components/Profile/MyPosts/Posts/MyPosts.module.css","components/Profile/MyPosts/Posts/Post.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Posts/Post.jsx","components/Profile/MyPosts/Posts/MyPosts.jsx","components/Profile/MyPosts/Posts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","classes","item","src","message","likeCount","maxLength10","maxLengthCreator","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","name","placeholder","validate","required","MyPosts","postsElements","posts","map","p","key","postsBlock","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatus","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileDataFormReduxForm","error","styles","formSummaryError","Input","type","Object","keys","profile","contacts","ProfileData","isOwner","onClick","goToEditMode","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","contact","ProfileInfo","Preloader","Img","descriptionBlock","photos","large","userPhoto","mainPhoto","target","files","length","savePhoto","initialValues","formData","saveProfile","then","Profile","ProfileContainer","userId","this","match","params","autorizedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","React","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.afa53e5f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__2xVh8\",\"posts\":\"MyPosts_posts__1ufCQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3iWZn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__qnpz7\",\"Img\":\"ProfileInfo_Img__2HOZ3\",\"mainPhoto\":\"ProfileInfo_mainPhoto__2_vQp\",\"contact\":\"ProfileInfo_contact__10En8\"};","import React from 'react';\r\nimport classes from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n   return <div className={classes.item}>\r\n      <img src='https://yt3.ggpht.com/a/AATXAJxlPvJZvg-IUO-Stb6lGFt3OWqBqwNyQEpgrg=s900-c-k-c0xffffffff-no-rj-mo' />\r\n      {props.message}\r\n      <div>\r\n         <span>Like {props.likeCount}</span>\r\n      </div>\r\n   </div>\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Textarea } from '../../../../common/FormsControls/FormsControl';\r\nimport { maxLengthCreator, required } from '../../../../utils/validators';\r\nimport classes from './MyPosts.module.css';\r\nimport Post from './Post';\r\n\r\nconst MyPosts = (props) => {\r\n\r\n   let postsElements = props.posts.map(p => <Post key={p.key} message={p.message} likeCount={p.likeCount} />);\r\n\r\n\r\n\r\n\r\n   let onAddPost = (values) => {\r\n      props.addPost(values.newPostText);\r\n   }\r\n\r\n   return <div className={classes.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddPostFormRedux onSubmit={onAddPost} />\r\n      <div className={classes.posts}>\r\n         {postsElements}\r\n      </div>\r\n   </div>\r\n\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n   return (\r\n      <form onSubmit={props.handleSubmit}>\r\n         <div>\r\n            <Field component={Textarea} name='newPostText' placeholder='Enter your text'\r\n               validate={[required, maxLength10]} />\r\n         </div>\r\n         <div>\r\n            <button>Add post</button>\r\n         </div>\r\n      </form>\r\n   )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm({ form: 'profileAddNewPostForm' })(AddNewPostForm)\r\n\r\nexport default MyPosts;","import {connect} from 'react-redux';\r\nimport { addPostActionCreator } from '../../../../redux/profile-reducer';\r\nimport MyPosts from './MyPosts';\r\n\r\nlet mapStateToProps = (state) => { \r\n   return {\r\n      posts: state.profilePage.posts,\r\n      newPostText: state.profilePage.newPostText\r\n   }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch) => { \r\n   return {\r\n      addPost: (newPostText) => {\r\n         dispatch(addPostActionCreator(newPostText));\r\n      }\r\n   }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps) (MyPosts);\r\n\r\n\r\nexport default MyPostsContainer;\r\n\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nexport const ProfileStatus = (props) => {\r\n\r\n   const [editMode, setEditMode] = useState(false);\r\n   const [status, setStatus] = useState(props.status);\r\n\r\n   useEffect( () => {\r\n      setStatus(props.status);\r\n   }, [props.status]);\r\n\r\n   const activateEditMode = () => {\r\n      setEditMode (true);\r\n   }\r\n\r\n   const deactivateEditMode = () => {\r\n      setEditMode (false);\r\n      props.updateStatus(status);\r\n   }\r\n\r\n   const onStatusChange = (e) => {\r\n      setStatus(e.currentTarget.value);\r\n   }\r\n   \r\n   return (\r\n      <div>\r\n         {!editMode &&\r\n            <div>\r\n               <b>Status:</b> <span onDoubleClick={activateEditMode}>{status || '*****'}</span>\r\n            </div>\r\n         }\r\n         {editMode &&\r\n            <div>\r\n               <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value={status} />\r\n            </div>\r\n         }\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { Input, Textarea } from '../../../common/FormsControls/FormsControl';\r\nimport { required } from '../../../utils/validators';\r\nimport styles from '../../../common/FormsControls/FormsControls.module.css'\r\n\r\nconst ProfileDataForm = (props) => {\r\n   return (\r\n      <form onSubmit={props.handleSubmit}>\r\n         <div><button>Save</button></div>\r\n         {props.error && <div className={styles.formSummaryError}>\r\n         {props.error}\r\n         </div>\r\n         }\r\n         <div>\r\n            <b>Full name</b>:\r\n            <Field placeholder={'Fullname'} name={'fullName'} component={Input} validate={[required]} />\r\n         </div>\r\n         <div>\r\n            <b>Looking for a job</b>:\r\n            <Field name={'lookingForAJob'} component={Input} validate={[required]} type='checkbox' />\r\n         </div>\r\n         <div>\r\n            <b>My professional skills</b> : <Field placeholder={'My professional skills'}\r\n               name={'lookingForAJobDescription'} component={Textarea} validate={[required]} type='textarea' />\r\n         </div>\r\n         <div>\r\n            <b>About me</b>: <Field placeholder={'About me'}\r\n               name={'aboutMe'} component={Textarea} validate={[required]} type='textarea' />\r\n         </div>\r\n         <div>\r\n            <b>Contacts</b>: {Object.keys(props.profile.contacts).map(key => {\r\n               return <div key={key}>\r\n                  <b>{key}: <Field placeholder={key}\r\n                     name={'contacts.' + key} component={Input}  /> </b>\r\n               </div>\r\n            })}\r\n         </div>\r\n      </form>\r\n   )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm({ form: 'edit-profile' })(ProfileDataForm)\r\n\r\nexport default ProfileDataFormReduxForm;","import React, { useState } from 'react';\r\nimport Preloader from '../../../common/loading/Preloader';\r\nimport classes from './ProfileInfo.module.css';\r\nimport ProfileStatus from './ProfileStatus';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileDataForm from './ProfileDataForm';\r\n\r\nconst ProfileInfo = (props) => {\r\n\r\n   const [editMode, setEditMode] = useState(false);\r\n\r\n   if (!props.profile) {\r\n      return <Preloader />\r\n   }\r\n\r\n   const onMainPhotoSelected = (e) => {\r\n      if (e.target.files.length) {\r\n         props.savePhoto(e.target.files[0]);\r\n      }\r\n   }\r\n\r\n   const onSubmit=(formData) => {\r\n      props.saveProfile(formData).then(\r\n         ()=>{\r\n            setEditMode(false)\r\n         }\r\n      ) \r\n   }\r\n\r\n   return (\r\n      <div>\r\n         <div>\r\n            <img className={classes.Img} src='https://i.ytimg.com/vi/RtLRMAMzzKk/maxresdefault.jpg' />\r\n         </div>\r\n         <div className={classes.descriptionBlock}>\r\n            <img src={props.profile.photos.large || userPhoto} className={classes.mainPhoto} />\r\n            <br /> {props.isOwner && <input type={'file'} onChange={onMainPhotoSelected} />}\r\n            {editMode\r\n               ? <ProfileDataForm initialValues={props.profile} profile={props.profile} onSubmit={onSubmit} />\r\n               : <ProfileData goToEditMode={()=>{setEditMode(true)}} profile={props.profile} isOwner={props.isOwner} />}\r\n            <ProfileStatus status={props.status} updateStatus={props.updateStatus} />\r\n         </div>\r\n\r\n      </div>\r\n   )\r\n}\r\n\r\nconst ProfileData = (props) => {\r\n   return (\r\n      <div>\r\n         {props.isOwner && <div><button onClick={props.goToEditMode}>Edit</button></div>}\r\n         <div>\r\n            <b>Full name</b>: {props.profile.fullName}\r\n         </div>\r\n         <div>\r\n            <b>Looking for a job</b>: {props.profile.lookingForAJob ? 'yes' : 'no'}\r\n         </div>\r\n         {props.profile.lookingForAJob &&\r\n            <div>\r\n               <b>My professional skills</b> : {props.profile.lookingForAJobDescription}\r\n            </div>}\r\n         <div>\r\n            <b>About me</b>: {props.profile.aboutMe}\r\n         </div>\r\n         <div>\r\n            <b>Contacts</b>: {Object.keys(props.profile.contacts).map(key => {\r\n               return <Contact key={key} contactTitle={key} contactValue={props.profile.contacts[key]} />\r\n            })}\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\nconst Contact = ({ contactTitle, contactValue }) => {\r\n   return <div className={classes.contact}><b>{contactTitle}</b>:{contactValue}</div>\r\n}\r\n\r\nexport default ProfileInfo;","import React from 'react';\r\nimport MyPostsContainer from './MyPosts/Posts/MyPostsContainer';\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\n\r\nconst Profile = (props) => {\r\n\r\n   \r\n\r\n   return (\r\n      <div>\r\n         <ProfileInfo saveProfile={props.saveProfile} savePhoto={props.savePhoto} isOwner={props.isOwner} profile={props.profile} status={props.status} updateStatus={props.updateStatus}/> \r\n         <MyPostsContainer   />\r\n      </div>\r\n   )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from './Profile';\r\nimport {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile} from '../../redux/profile-reducer';\r\nimport {connect} from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\nclass ProfileContainer extends React.Component {\r\n   \r\n   refreshProfile() {\r\n      let userId = this.props.match.params.userId;\r\n      if (!userId)  {\r\n         userId = this.props.autorizedUserId;\r\n         if (!userId)  {\r\n            this.props.history.push('/login');\r\n         }\r\n      }\r\n      this.props.getUserProfile(userId);\r\n      this.props.getStatus(userId);\r\n   }\r\n   \r\n\r\n   componentDidMount() {\r\n      this.refreshProfile()\r\n   }\r\n\r\n   componentDidUpdate(prevProps, prevState) {\r\n      if (this.props.match.params.userId != prevProps.match.params.userId) {\r\n      this.refreshProfile()\r\n      }\r\n   }\r\n\r\n   render () {\r\n\r\n      return <Profile {...this.props} \r\n            profile={this.props.profile} \r\n            status={this.props.status} \r\n            updateStatus={this.props.updateStatus}\r\n            isOwner={!this.props.match.params.userId}\r\n            savePhoto={this.props.savePhoto}\r\n            saveProfile={this.props.saveProfile}/>\r\n   }\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n   profile: state.profilePage.profile,\r\n   status: state.profilePage.status,\r\n   autorizedUserId: state.auth.userId,\r\n   isAuth: state.auth.isAuth\r\n});\r\n\r\nexport default compose (\r\n   connect (mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile }),\r\n   withRouter,\r\n   //witAuthRedirect\r\n) (ProfileContainer);"],"sourceRoot":""}